KERNEL_NAME: edisp_cu1
TEMPLATE_PARAMS: template <class Ver, class DTYP>
CONSTEXPR_FLAGS: |
  constexpr bool do_a = Ver::a;
  constexpr bool do_e = Ver::e;
  constexpr bool do_v = Ver::v;
  constexpr bool do_g = Ver::g;

COUNT:
  - nd
ENERGY:
  - ed
VIRIAL:
  - vd
GRADIENT:
  - gx
  - gy
  - gz

CUT_DISTANCE:
  - cut
OFF_DISTANCE:
  - 'off'

EXCLUDE_INFO:
  - dinfo

SCALE_1X_TYPE: real_const_array

EXTRA_PARAMS: |
  , const real* restrict csix, const real* restrict adisp, real aewald

I_POSITION:
  - def: register real xi from:x
  - def: register real yi from:y
  - def: register real zi from:z
K_POSITION:
  - def: register real xk from:x
  - def: register real yk from:y
  - def: register real zk from:z

I_FORCE:
  - def: register real gxi addto:gx
  - def: register real gyi addto:gy
  - def: register real gzi addto:gz
K_FORCE:
  - def: register real gxk addto:gx
  - def: register real gyk addto:gy
  - def: register real gzk addto:gz

I_VARIABLES:
  - def: register real ci from:csix
  - def: register real ai from:adisp
K_VARIABLES:
  - def: register real ck from:csix
  - def: register real ak from:adisp

SCALED_PAIRWISE_INTERACTION: |
  real xr = @xi@ - xk;
  real yr = @yi@ - yk;
  real zr = @zi@ - zk;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real r = REAL_SQRT(r2);
    real rr1 = REAL_RECIP(r);
    real e, de;
    pair_disp<do_g, DTYP, 0>(r, r2, rr1,
      scalea, aewald, @ci@, @ai@, ck, ak, cut, off, e, de);
    if CONSTEXPR (do_e) {
      edtl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (scalea != 0 and e != 0)
          ndtl += 1;
      }
    }
    if CONSTEXPR (do_g) {
      real dedx, dedy, dedz;
      de *= rr1;
      dedx = de * xr;
      dedy = de * yr;
      dedz = de * zr;
      @gxi@ += dedx;
      @gyi@ += dedy;
      @gzi@ += dedz;
      gxk -= dedx;
      gyk -= dedy;
      gzk -= dedz;
      if CONSTEXPR (do_v) {
        vdtlxx += floatTo<vbuf_prec>(xr * dedx);
        vdtlyx += floatTo<vbuf_prec>(yr * dedx);
        vdtlzx += floatTo<vbuf_prec>(zr * dedx);
        vdtlyy += floatTo<vbuf_prec>(yr * dedy);
        vdtlzy += floatTo<vbuf_prec>(zr * dedy);
        vdtlzz += floatTo<vbuf_prec>(zr * dedz);
      }
    }
  } // end if (include)

FULL_PAIRWISE_INTERACTION: |
  real xr = @xi@ - xk;
  real yr = @yi@ - yk;
  real zr = @zi@ - zk;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real r = REAL_SQRT(r2);
    real rr1 = REAL_RECIP(r);
    real e, de;
    pair_disp<do_g, DTYP, 1>(r, r2, rr1,
      1, aewald, @ci@, @ai@, ck, ak, cut, off, e, de);
    if CONSTEXPR (do_e) {
      edtl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (e != 0)
          ndtl += 1;
      }
    }
    if CONSTEXPR (do_g) {
      real dedx, dedy, dedz;
      de *= rr1;
      dedx = de * xr;
      dedy = de * yr;
      dedz = de * zr;
      @gxi@ += dedx;
      @gyi@ += dedy;
      @gzi@ += dedz;
      gxk -= dedx;
      gyk -= dedy;
      gzk -= dedz;
      if CONSTEXPR (do_v) {
        vdtlxx += floatTo<vbuf_prec>(xr * dedx);
        vdtlyx += floatTo<vbuf_prec>(yr * dedx);
        vdtlzx += floatTo<vbuf_prec>(zr * dedx);
        vdtlyy += floatTo<vbuf_prec>(yr * dedy);
        vdtlzy += floatTo<vbuf_prec>(zr * dedy);
        vdtlzz += floatTo<vbuf_prec>(zr * dedz);
      }
    }
  } // end if (include)
