KERNEL_NAME: emplar_cu1
TEMPLATE_PARAMS: template<class Ver, class ETYP>
CONSTEXPR_FLAGS: |
  constexpr bool do_e = Ver::e;
  constexpr bool do_g = Ver::g;
  constexpr bool do_v = Ver::v;
  static_assert(!Ver::a, "");

# COUNT:
ENERGY:
  - ebuf
VIRIAL:
  - vbuf
GRADIENT:
  - gx
  - gy
  - gz

# CUT_DISTANCE:
OFF_DISTANCE:
  - 'off'

# EXCLUDE_INFO:
#   - mdpuinfo

SCALE_1X_TYPE: real4_const_array,0,1,2,3

EXTRA_PARAMS: |
  , real* restrict trqx, real* restrict trqy, real* restrict trqz
  , const real (*restrict rpole)[10]
  , const real (*restrict uind)[3], const real (*restrict uinp)[3]
  , const real* restrict thole, const real* restrict pdamp
  , real f, real aewald

I_POSITION:
  - def: shared real xi from:x
  - def: shared real yi from:y
  - def: shared real zi from:z
K_POSITION:
  - def: register real xk from:x
  - def: register real yk from:y
  - def: register real zk from:z

I_FORCE:
  - def: shared real frcxi addto:gx
  - def: shared real frcyi addto:gy
  - def: shared real frczi addto:gz
  - def: shared real trqxi addto:trqx
  - def: shared real trqyi addto:trqy
  - def: shared real trqzi addto:trqz
K_FORCE:
  - def: register real frcxk addto:gx
  - def: register real frcyk addto:gy
  - def: register real frczk addto:gz
  - def: register real trqxk addto:trqx
  - def: register real trqyk addto:trqy
  - def: register real trqzk addto:trqz

I_VARIABLES:
  - def: shared real ci   from:rpole,mpl_pme_0
  - def: shared real dix  from:rpole,mpl_pme_x
  - def: shared real diy  from:rpole,mpl_pme_y
  - def: shared real diz  from:rpole,mpl_pme_z
  - def: shared real qixx from:rpole,mpl_pme_xx
  - def: shared real qixy from:rpole,mpl_pme_xy
  - def: shared real qixz from:rpole,mpl_pme_xz
  - def: shared real qiyy from:rpole,mpl_pme_yy
  - def: shared real qiyz from:rpole,mpl_pme_yz
  - def: shared real qizz from:rpole,mpl_pme_zz
  - def: shared real uidx from:uind,0
  - def: shared real uidy from:uind,1
  - def: shared real uidz from:uind,2
  - def: shared real uipx from:uinp,0
  - def: shared real uipy from:uinp,1
  - def: shared real uipz from:uinp,2
  - def: shared real pdi  from:pdamp
  - def: shared real pti  from:thole
K_VARIABLES:
  - def: register real ck   from:rpole,mpl_pme_0
  - def: register real dkx  from:rpole,mpl_pme_x
  - def: register real dky  from:rpole,mpl_pme_y
  - def: register real dkz  from:rpole,mpl_pme_z
  - def: register real qkxx from:rpole,mpl_pme_xx
  - def: register real qkxy from:rpole,mpl_pme_xy
  - def: register real qkxz from:rpole,mpl_pme_xz
  - def: register real qkyy from:rpole,mpl_pme_yy
  - def: register real qkyz from:rpole,mpl_pme_yz
  - def: register real qkzz from:rpole,mpl_pme_zz
  - def: register real ukdx from:uind,0
  - def: register real ukdy from:uind,1
  - def: register real ukdz from:uind,2
  - def: register real ukpx from:uinp,0
  - def: register real ukpy from:uinp,1
  - def: register real ukpz from:uinp,2
  - def: register real pdk from:pdamp
  - def: register real ptk from:thole

SCALED_PAIRWISE_INTERACTION: |
  real xr = xk - @xi@;
  real yr = yk - @yi@;
  real zr = zk - @zi@;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real e1, vxx1, vyx1, vzx1, vyy1, vzy1, vzz1;
    pair_mplar<Ver, NON_EWALD>(
      r2, make_real3(xr, yr, zr), scalea-1, scaleb-1, scalec-1, scaled-1,
      @ci@, make_real3(@dix@, @diy@, @diz@),
      @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@,
      make_real3(@uidx@, @uidy@, @uidz@),
      make_real3(@uipx@, @uipy@, @uipz@), @pdi@, @pti@,
      ck, make_real3(dkx, dky, dkz), qkxx, qkxy, qkxz, qkyy, qkyz, qkzz,
      make_real3(ukdx, ukdy, ukdz), make_real3(ukpx, ukpy, ukpz), pdk, ptk,
      f, aewald,
      @frcxi@, @frcyi@, @frczi@, frcxk, frcyk, frczk,
      @trqxi@, @trqyi@, @trqzi@, trqxk, trqyk, trqzk,
      e1, vxx1, vyx1, vzx1, vyy1, vzy1, vzz1);
    if CONSTEXPR (do_e) {
      ebuftl += cvt_to<ebuf_prec>(e1);
    }
    if CONSTEXPR (do_v) {
      vbuftlxx += cvt_to<vbuf_prec>(vxx1);
      vbuftlyx += cvt_to<vbuf_prec>(vyx1);
      vbuftlzx += cvt_to<vbuf_prec>(vzx1);
      vbuftlyy += cvt_to<vbuf_prec>(vyy1);
      vbuftlzy += cvt_to<vbuf_prec>(vzy1);
      vbuftlzz += cvt_to<vbuf_prec>(vzz1);
    }
  } // end if (include)

FULL_PAIRWISE_INTERACTION: |
  real xr = xk - @xi@;
  real yr = yk - @yi@;
  real zr = zk - @zi@;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real e, vxx, vyx, vzx, vyy, vzy, vzz;
    pair_mplar<Ver, ETYP>(
      r2, make_real3(xr, yr, zr), 1, 1, 1, 1,
      @ci@, make_real3(@dix@, @diy@, @diz@),
      @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@,
      make_real3(@uidx@, @uidy@, @uidz@),
      make_real3(@uipx@, @uipy@, @uipz@), @pdi@, @pti@,
      ck, make_real3(dkx, dky, dkz), qkxx, qkxy, qkxz, qkyy, qkyz, qkzz,
      make_real3(ukdx, ukdy, ukdz), make_real3(ukpx, ukpy, ukpz), pdk, ptk,
      f, aewald,
      @frcxi@, @frcyi@, @frczi@, frcxk, frcyk, frczk,
      @trqxi@, @trqyi@, @trqzi@, trqxk, trqyk, trqzk,
      e, vxx, vyx, vzx, vyy, vzy, vzz);
    if CONSTEXPR (do_e) {
      ebuftl += cvt_to<ebuf_prec>(e);
    }
    if CONSTEXPR (do_v) {
      vbuftlxx += cvt_to<vbuf_prec>(vxx);
      vbuftlyx += cvt_to<vbuf_prec>(vyx);
      vbuftlzx += cvt_to<vbuf_prec>(vzx);
      vbuftlyy += cvt_to<vbuf_prec>(vyy);
      vbuftlzy += cvt_to<vbuf_prec>(vzy);
      vbuftlzz += cvt_to<vbuf_prec>(vzz);
    }
  } // end if (include)
