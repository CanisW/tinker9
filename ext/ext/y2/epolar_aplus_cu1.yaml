KERNEL_NAME: epolarAplus_cu1
TEMPLATE_PARAMS: template <class Ver, class ETYP, bool CFLX>
CONSTEXPR_FLAGS: |
  constexpr bool do_e = Ver::e;
  constexpr bool do_a = Ver::a;
  constexpr bool do_g = Ver::g;
  constexpr bool do_v = Ver::v;

COUNT:
  - nep
ENERGY:
  - ep
VIRIAL:
  - vep
GRADIENT:
  - gx
  - gy
  - gz

#CUT_DISTANCE:
OFF_DISTANCE:
  - 'off'

EXCLUDE_INFO:
  - mdpuinfo
SCALE_1X_TYPE: real4_const_array,2,3

EXTRA_PARAMS: |
  , real(*restrict ufld)[3]
  , real(*restrict dufld)[6]
  , const real(*restrict uind)[3]
  , real *restrict pot
  , const real(*restrict rpole)[10]
  , const real *restrict pdamp
  , const real *restrict thole
  , const real* restrict dirdamp
  , real aewald, real f

I_POSITION:
  - def: shared real xi from:x
  - def: shared real yi from:y
  - def: shared real zi from:z
K_POSITION:
  - def: register real xk from:x
  - def: register real yk from:y
  - def: register real zk from:z
I_VARIABLES:
  - def: shared real ci   from:rpole,MPL_PME_0
  - def: shared real dix  from:rpole,MPL_PME_X
  - def: shared real diy  from:rpole,MPL_PME_Y
  - def: shared real diz  from:rpole,MPL_PME_Z
  - def: shared real qixx from:rpole,MPL_PME_XX
  - def: shared real qixy from:rpole,MPL_PME_XY
  - def: shared real qixz from:rpole,MPL_PME_XZ
  - def: shared real qiyy from:rpole,MPL_PME_YY
  - def: shared real qiyz from:rpole,MPL_PME_YZ
  - def: shared real qizz from:rpole,MPL_PME_ZZ
  - def: shared real uix  from:uind,0
  - def: shared real uiy  from:uind,1
  - def: shared real uiz  from:uind,2
  - def: shared real pdi  from:pdamp
  - def: shared real pti  from:thole
  - def: shared real ddi  from:dirdamp
K_VARIABLES:
  - def: register real ck   from:rpole,MPL_PME_0
  - def: register real dkx  from:rpole,MPL_PME_X
  - def: register real dky  from:rpole,MPL_PME_Y
  - def: register real dkz  from:rpole,MPL_PME_Z
  - def: register real qkxx from:rpole,MPL_PME_XX
  - def: register real qkxy from:rpole,MPL_PME_XY
  - def: register real qkxz from:rpole,MPL_PME_XZ
  - def: register real qkyy from:rpole,MPL_PME_YY
  - def: register real qkyz from:rpole,MPL_PME_YZ
  - def: register real qkzz from:rpole,MPL_PME_ZZ
  - def: register real ukx  from:uind,0
  - def: register real uky  from:uind,1
  - def: register real ukz  from:uind,2
  - def: register real pdk  from:pdamp
  - def: register real ptk  from:thole
  - def: register real ddk  from:dirdamp
I_FORCE:
  - def: shared real frcxi   addto:gx
  - def: shared real frcyi   addto:gy
  - def: shared real frczi   addto:gz
  - def: shared real ufld0i  addto:ufld,0
  - def: shared real ufld1i  addto:ufld,1
  - def: shared real ufld2i  addto:ufld,2
  - def: shared real dufld0i addto:dufld,0
  - def: shared real dufld1i addto:dufld,1
  - def: shared real dufld2i addto:dufld,2
  - def: shared real dufld3i addto:dufld,3
  - def: shared real dufld4i addto:dufld,4
  - def: shared real dufld5i addto:dufld,5
  - def: shared real poti    addto:pot onlyif:CFLX
K_FORCE:
  - def: register real frcxk   addto:gx
  - def: register real frcyk   addto:gy
  - def: register real frczk   addto:gz
  - def: register real ufld0k  addto:ufld,0
  - def: register real ufld1k  addto:ufld,1
  - def: register real ufld2k  addto:ufld,2
  - def: register real dufld0k addto:dufld,0
  - def: register real dufld1k addto:dufld,1
  - def: register real dufld2k addto:dufld,2
  - def: register real dufld3k addto:dufld,3
  - def: register real dufld4k addto:dufld,4
  - def: register real dufld5k addto:dufld,5
  - def: register real potk addto:pot onlyif:CFLX

SCALED_PAIRWISE_INTERACTION: |
  real xr = xk - @xi@;
  real yr = yk - @yi@;
  real zr = zk - @zi@;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real e, vxx, vyx, vzx, vyy, vzy, vzz;
    real e1, vxx1, vyx1, vzx1, vyy1, vzy1, vzz1;
    real pota, potb;
    real pota1, potb1;
    pair_polar_aplus_v2<Ver, ETYP, CFLX>( //
      r2, xr, yr, zr, 1, 1, //
      @ci@, @dix@, @diy@, @diz@, //
      @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@, //
      @uix@, @uiy@, @uiz@, @pdi@, @pti@, @ddi@, //
      ck, dkx, dky, dkz, //
      qkxx, qkxy, qkxz, qkyy, qkyz, qkzz, //
      ukx, uky, ukz, pdk, ptk, ddk, //
      f, aewald, //
      @frcxi@, @frcyi@, @frczi@, frcxk, frcyk, frczk, //
      @ufld0i@, @ufld1i@, @ufld2i@, ufld0k, ufld1k, ufld2k, //
      @dufld0i@, @dufld1i@, @dufld2i@, @dufld3i@, @dufld4i@, @dufld5i@, //
      dufld0k, dufld1k, dufld2k, dufld3k, dufld4k, dufld5k, //
      e1, vxx1, vyx1, vzx1, vyy1, vzy1, vzz1, pota1, potb1);
    pair_polar_aplus_v2<Ver, NON_EWALD, CFLX>( //
      r2, xr, yr, zr, scalec-1, scaled-1, //
      @ci@, @dix@, @diy@, @diz@, //
      @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@, //
      @uix@, @uiy@, @uiz@, @pdi@, @pti@, @ddi@, //
      ck, dkx, dky, dkz, //
      qkxx, qkxy, qkxz, qkyy, qkyz, qkzz, //
      ukx, uky, ukz, pdk, ptk, ddk, //
      f, aewald, //
      @frcxi@, @frcyi@, @frczi@, frcxk, frcyk, frczk, //
      @ufld0i@, @ufld1i@, @ufld2i@, ufld0k, ufld1k, ufld2k, //
      @dufld0i@, @dufld1i@, @dufld2i@, @dufld3i@, @dufld4i@, @dufld5i@, //
      dufld0k, dufld1k, dufld2k, dufld3k, dufld4k, dufld5k, //
      e, vxx, vyx, vzx, vyy, vzy, vzz, pota, potb);
    if CONSTEXPR (do_e) {
      e = e + e1;
      eptl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (e != 0 and scalec != 0)
          neptl += 1;
      }
    }
    if CONSTEXPR (do_v) {
      veptlxx += floatTo<vbuf_prec>(vxx + vxx1);
      veptlyx += floatTo<vbuf_prec>(vyx + vyx1);
      veptlzx += floatTo<vbuf_prec>(vzx + vzx1);
      veptlyy += floatTo<vbuf_prec>(vyy + vyy1);
      veptlzy += floatTo<vbuf_prec>(vzy + vzy1);
      veptlzz += floatTo<vbuf_prec>(vzz + vzz1);
    }
    if CONSTEXPR (CFLX) {
      @poti@ += (pota + pota1);
      potk += (potb + potb1);
    }
  } // end if (include)
FULL_PAIRWISE_INTERACTION: |
  real xr = xk - @xi@;
  real yr = yk - @yi@;
  real zr = zk - @zi@;
  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real e, vxx, vyx, vzx, vyy, vzy, vzz;
    real pota, potb;
    pair_polar_aplus_v2<Ver, ETYP, CFLX>( //
      r2, xr, yr, zr, 1, 1, //
      @ci@, @dix@, @diy@, @diz@, //
      @qixx@, @qixy@, @qixz@, @qiyy@, @qiyz@, @qizz@, //
      @uix@, @uiy@, @uiz@, @pdi@, @pti@, @ddi@, //
      ck, dkx, dky, dkz, //
      qkxx, qkxy, qkxz, qkyy, qkyz, qkzz, //
      ukx, uky, ukz, pdk, ptk, ddk, //
      f, aewald, //
      @frcxi@, @frcyi@, @frczi@, frcxk, frcyk, frczk, //
      @ufld0i@, @ufld1i@, @ufld2i@, ufld0k, ufld1k, ufld2k, //
      @dufld0i@, @dufld1i@, @dufld2i@, @dufld3i@, @dufld4i@, @dufld5i@, //
      dufld0k, dufld1k, dufld2k, dufld3k, dufld4k, dufld5k, //
      e, vxx, vyx, vzx, vyy, vzy, vzz, pota, potb);
    if CONSTEXPR (do_e) {
      eptl += floatTo<ebuf_prec>(e);
      if CONSTEXPR (do_a) {
        if (e != 0)
          neptl += 1;
      }
    }
    if CONSTEXPR (do_v) {
      veptlxx += floatTo<vbuf_prec>(vxx);
      veptlyx += floatTo<vbuf_prec>(vyx);
      veptlzx += floatTo<vbuf_prec>(vzx);
      veptlyy += floatTo<vbuf_prec>(vyy);
      veptlzy += floatTo<vbuf_prec>(vzy);
      veptlzz += floatTo<vbuf_prec>(vzz);
    }
    if CONSTEXPR (CFLX) {
      @poti@ += pota;
      potk += potb;
    }
  } // end if (include)
