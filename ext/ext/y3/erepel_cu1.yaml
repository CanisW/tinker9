OUTPUT_DIR: src/cu/hippo
KERNEL_NAME: erepel_cu1
TEMPLATE_PARAMS: template <class Ver>
CONSTEXPR_FLAGS: |
  constexpr bool do_a = Ver::a;
  constexpr bool do_e = Ver::e;
  constexpr bool do_v = Ver::v;
  constexpr bool do_g = Ver::g;

COUNT:
  - nr
ENERGY:
  - er
VIRIAL:
  - vr
GRADIENT:
  - gx
  - gy
  - gz

CUT_DISTANCE: cut
OFF_DISTANCE: 'off'

EXCLUDE_INFO: rinfo
SCALE_1X_TYPE: real_const_array

EXTRA_PARAMS: |
  , real *restrict trqx
  , real *restrict trqy
  , real *restrict trqz
  , const real(*restrict rpole)[10]
  , const real* restrict sizpr
  , const real* restrict elepr
  , const real* restrict dmppr
  , const int*  restrict mut
  , real vlam
  , Vdw vcouple
# IMPLICIT_PARAMS:

I_VARIABLES:
  - shared real xi   from:x
  - shared real yi   from:y
  - shared real zi   from:z
  - shared real ci   from:rpole,MPL_PME_0
  - shared real dix  from:rpole,MPL_PME_X
  - shared real diy  from:rpole,MPL_PME_Y
  - shared real diz  from:rpole,MPL_PME_Z
  - shared real qixx from:rpole,MPL_PME_XX
  - shared real qixy from:rpole,MPL_PME_XY
  - shared real qixz from:rpole,MPL_PME_XZ
  - shared real qiyy from:rpole,MPL_PME_YY
  - shared real qiyz from:rpole,MPL_PME_YZ
  - shared real qizz from:rpole,MPL_PME_ZZ
  - shared real sizi from:sizpr
  - shared real dmpi from:dmppr
  - shared real vali from:elepr
  - shared int  imut from:mut
K_VARIABLES:
  - shared   real xk  from:x
  - shared   real yk  from:y
  - shared   real zk  from:z
  - register real ck  from:rpole,MPL_PME_0
  - shared   real dkx from:rpole,MPL_PME_X
  - shared   real dky from:rpole,MPL_PME_Y
  - shared   real dkz from:rpole,MPL_PME_Z
  - register real qkxx from:rpole,MPL_PME_XX
  - register real qkxy from:rpole,MPL_PME_XY
  - register real qkxz from:rpole,MPL_PME_XZ
  - register real qkyy from:rpole,MPL_PME_YY
  - register real qkyz from:rpole,MPL_PME_YZ
  - register real qkzz from:rpole,MPL_PME_ZZ
  - register real sizk from:sizpr
  - register real dmpk from:dmppr
  - register real valk from:elepr
  - register int  kmut from:mut
I_FORCE:
  - register real gxi addto:gx
  - register real gyi addto:gy
  - register real gzi addto:gz
  - register real txi addto:trqx
  - register real tyi addto:trqy
  - register real tzi addto:trqz
K_FORCE:
  - register real gxk addto:gx
  - register real gyk addto:gy
  - register real gzk addto:gz
  - register real txk addto:trqx
  - register real tyk addto:trqy
  - register real tzk addto:trqz

#SCALED_PAIRWISE_INTERACTION: |
FULL_PAIRWISE_INTERACTION: |
  real xr = @xk@ - @xi@;
  real yr = @yk@ - @yi@;
  real zr = @zk@ - @zi@;

  real e;
  PairRepelGrad pgrad;
  zero(pgrad);

  real r2 = image2(xr, yr, zr);
  if (r2 <= off * off and incl) {
    real vlambda = pair_vlambda(vlam, vcouple, @imut@, @kmut@);
    pair_repel<do_g, 1>( //
      r2, scalea, vlambda, cut, off, xr, yr, zr,
      @sizi@, @dmpi@, @vali@, @ci@, @dix@, @diy@, @diz@, @qixx@, @qixy@,
      @qixz@, @qiyy@, @qiyz@, @qizz@,
      @sizk@, @dmpk@, @valk@, @ck@, @dkx@, @dky@, @dkz@, @qkxx@, @qkxy@,
      @qkxz@, @qkyy@, @qkyz@, @qkzz@,
      e, pgrad);

    if CONSTEXPR (do_a)
      if (e != 0)
          nrtl += 1;
    if CONSTEXPR (do_e)
        ertl += floatTo<ebuf_prec>(e);
    if CONSTEXPR (do_g) {
      @gxi@ += pgrad.frcx;
      @gyi@ += pgrad.frcy;
      @gzi@ += pgrad.frcz;
      @gxk@ -= pgrad.frcx;
      @gyk@ -= pgrad.frcy;
      @gzk@ -= pgrad.frcz;


      @txi@ += pgrad.ttqi[0];
      @tyi@ += pgrad.ttqi[1];
      @tzi@ += pgrad.ttqi[2];
      @txk@ += pgrad.ttqk[0];
      @tyk@ += pgrad.ttqk[1];
      @tzk@ += pgrad.ttqk[2];
    }
    if CONSTEXPR (do_v) {
        vrtlxx += floatTo<vbuf_prec>(-xr * pgrad.frcx);
        vrtlyx += floatTo<vbuf_prec>(-0.5f * (yr * pgrad.frcx + xr * pgrad.frcy));
        vrtlzx += floatTo<vbuf_prec>(-0.5f * (zr * pgrad.frcx + xr * pgrad.frcz));
        vrtlyy += floatTo<vbuf_prec>(-yr * pgrad.frcy);
        vrtlzy += floatTo<vbuf_prec>(-0.5f * (zr * pgrad.frcy + yr * pgrad.frcz));
        vrtlzz += floatTo<vbuf_prec>(-zr * pgrad.frcz);
    }
  } // end if (include)
