cmake_minimum_required (VERSION 3.12)


# Generated by the shell command "LC_COLLATE=C ls -1a *.cpp {ff,math,md,tool}/*.cpp"
set (__T9_CPP_SRC
analyze_x.cpp
bar_x.cpp
cflux.cpp
compilers.cpp
dynamic_x.cpp
eangle.cpp
eangtor.cpp
ebond.cpp
echarge.cpp
echglj.cpp
echgtrn.cpp
edisp.cpp
egeom.cpp
eimprop.cpp
eimptor.cpp
elec.cpp
emplar.cpp
empole.cpp
empole_chgpen.cpp
energy.cpp
eopbend.cpp
epitors.cpp
epolar.cpp
epolar_chgpen.cpp
erepel.cpp
estrbnd.cpp
estrtor.cpp
etors.cpp
etortor.cpp
eurey.cpp
evalence.cpp
evdw.cpp
ff/atom.cpp
ff/box.cpp
ff/elec.cpp
ff/molecule.cpp
ff/nblist.cpp
ff/potent.cpp
ff/pme.cpp
ff/switch.cpp
field.cpp
field_chgpen.cpp
induce.cpp
induce_donly.cpp
initial.cpp
itgEnum.cpp
itgbBasic.cpp
itgbBerendsen.cpp
itgbLP22.cpp
itgbLogVAniso.cpp
itgbLogVIso.cpp
itgbMonteCarlo.cpp
itgbNhc06.cpp
itgiBasic.cpp
itgiLP22.cpp
itgiLeapFrogLP.cpp
itgiNhc06.cpp
itgiNhc96.cpp
itgiRespa.cpp
itgiVerlet.cpp
itgpBasic.cpp
itgpLogV.cpp
itgpRespa.cpp
itgtBasic.cpp
itgtBussi.cpp
itgtNhc.cpp
itgtNhc06.cpp
lf_lpiston.cpp
lpiston.cpp
math/lu.cpp
md/rattle.cpp
mdegv.cpp
mdintg.cpp
mdppg.cpp
mdpq.cpp
mdpt.cpp
mdsave.cpp
mechanic2.cpp
minimize_x.cpp
mod.cpp
moments.cpp
nhc.cpp
nose.cpp
osrw.cpp
platform.cpp
random.cpp
rc_man.cpp
spatial.cpp
spatial2.cpp
testgrad_x.cpp
testrt.cpp
tinker_rt.cpp
tinker_suppl.cpp
tool/energybuffer.cpp
tool/errlinux.cpp
tool/errprint.cpp
tool/exec.cpp
tool/iofortstr.cpp
tool/iotext.cpp
trimatexp.cpp
)
if (HOST)
   list (APPEND __T9_CPP_SRC
host/darray.cpp
host/execq.cpp
host/fft.cpp
host/gpucard.cpp
   )
else ()
   list (APPEND __T9_CPP_SRC
cudart/darray.cpp
cudart/error.cpp
cudart/execq.cpp
cudart/fft.cpp
cudart/gpucard.cpp
cudart/thrustcache.cpp
   )
endif ()
add_library (tinker9_cpp OBJECT "${__T9_CPP_SRC}")


add_library (tinker9_version OBJECT
   info_x.cc
   promo.cc
)
target_link_libraries (tinker9_version PUBLIC tinker9_cpp)


# macro
target_compile_definitions (tinker9_cpp PUBLIC ${T9_DEFS})
if (__T9_GIT_SHA1)
   target_compile_definitions (tinker9_version PRIVATE
      TINKER9_GIT_SHORT_HASH=${__T9_GIT_SHA1})
endif()
if (__T9_GIT_DATE)
   target_compile_definitions (tinker9_version PRIVATE
      TINKER9_GIT_DATE="${__T9_GIT_DATE}")
endif ()
# include
if (HOST)
else ()
   target_include_directories (tinker9_cpp PUBLIC "${CUDA_DIR}/include")
endif ()
target_include_directories (tinker9_cpp     PUBLIC  "${PROJECT_SOURCE_DIR}/include")
target_include_directories (tinker9_cpp     PRIVATE "${PROJECT_SOURCE_DIR}/include/syntax/acc")
target_include_directories (tinker9_version PRIVATE "${PROJECT_SOURCE_DIR}/include/syntax/acc")
# lib
target_link_libraries (tinker9_cpp PUBLIC tinkerFToCpp)
# FFTW
if (HOST)
   target_include_directories (tinker9_cpp SYSTEM PUBLIC "${FFTW_DIR}/include")
   target_link_libraries (tinker9_cpp PUBLIC t9_lfftw t9_lfftw_threads)
else ()
endif ()
