#!/usr/bin/env python3
from datetime import datetime
import subprocess
import sys

ThisVersion = 3
DefaultNProc = 8

NewLine = '\n'
kUbuntu = 'ubuntu'
kDevelUbuntu = 'devel-ubuntu'
kRuntimeUbuntu = 'runtime-ubuntu'

lCudaKeys = ['10.1', '11.2.2']
ConfigData = {
    # cuda10.1
    '10.1': {
        kUbuntu: '18.04',
        kDevelUbuntu: '10.1-devel-ubuntu18.04',
        kRuntimeUbuntu: '10.1-runtime-ubuntu18.04',
    },

    # cuda11.2.2
    '11.2.2': {
        kUbuntu: '20.04',
        kDevelUbuntu: '11.2.2-devel-ubuntu20.04',
        kRuntimeUbuntu: '11.2.2-runtime-ubuntu20.04',
    }
}

class Help:
    @classmethod
    def printMessage(cls, msg: str):
        if msg != '':
            print('Error: %s\n' % msg)

        line = '''Dockerfile Writer

Synopsis

    tinker9.docker [CudaVersion] [Stage]
        Generate the docker files and print the command.

    tinker9.docker [CudaVersion] [Stage] | bash
        Generate the docker files and execute the command.\n'''

        line += '\nCudaVersion'
        for k in lCudaKeys:
            c = ConfigData[k]
            line += '\n    %-8s   Ubuntu %-8s' % (k, c[kUbuntu])

        line += '\n\nStage'
        line += '\n    devel      Create a heavy image with all the tools.'
        line += '\n    runtime    Create a miniature runtime image.'
        line += '\n    compile    Compile the executable in a temporary image.'
        line += '\n    install    Copy the executable to the runtime image.'
        print(line)

class Ubuntu:
    @classmethod
    def dockerRunInstallCmake(cls, version: str) -> str:
        if version == '18.04' or version == '20.04':
            c = '''# update cmake https://apt.kitware.com
RUN apt install -y gpg wget
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
RUN echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
RUN apt update -y
RUN rm /usr/share/keyrings/kitware-archive-keyring.gpg
RUN apt install -y kitware-archive-keyring
RUN apt update -y && apt install -y cmake'''
        # elif version == '20.04':
        #     c = 'RUN apt install -y cmake'
        else:
            raise Exception('Unknown Ubuntu version %s' % version)
        return c

class DockerFile:
    def __init__(self, cudaver: str):
        self.cudaVersion = cudaver
        self.config = ConfigData[cudaver]
        self.ubuntu = self.config[kUbuntu]

    def filename(self) -> str:
        return 'Dockerfile-%s' % self.cudaVersion

    def tag(self) -> str:
        cuda = self.cudaVersion
        return 'cuda%s' % (cuda)

    def content(self) -> str:
        return '# content'

    def printCmd(self):
        cmd = 'docker build -t %s -f %s .' % (self.tag(), self.filename())
        print(cmd)
        return self

    def generateFile(self, printToScreen: bool = True):
        c = self.content()
        c += '\n# Generated by the Python script tinker.docker v%d' % ThisVersion
        if printToScreen:
            print(c)
            print('# %s\n\n# command' % self.filename())
        else:
            c += NewLine
            f = open(self.filename(), 'w')
            f.write(c)
            f.close()
        return self

class DevelFile(DockerFile):
    def __init__(self, cudaver: str):
        super().__init__(cudaver)

    def filename(self) -> str:
        return 'devel-%s.dockerfile' % self.cudaVersion

    def tag(self) -> str:
        t = super().tag()
        return 'tinkertools/tinker9-devel:%s' % t

    def content(self) -> str:
        # load the base image
        c = 'FROM nvidia/cuda:%s' % self.config[kDevelUbuntu]

        # install packages
        c += NewLine
        c += NewLine
        c += 'ARG DEBIAN_FRONTEND=noninteractive'
        c += NewLine
        c += 'RUN apt update -y && apt install -y ca-certificates libssl-dev gfortran git'
        c += NewLine
        c += Ubuntu.dockerRunInstallCmake(self.ubuntu)

        # # install nvhpc
        # c += NewLine
        # c += NewLine
        # c += Nvhpc.dockerRunInstallNvhpc(self.nvhpc)

        # # add nvhpc to PATH
        # c += NewLine
        # c += NewLine
        # c += 'ENV PATH="$PATH:/opt/nvidia/hpc_sdk/Linux_x86_64/%s/compilers/bin"' % self.nvhpc
        # c += NewLine
        # c += 'ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/nvidia/hpc_sdk/Linux_x86_64/%s/compilers/lib"' % self.nvhpc

        return c

class RuntimeFile(DockerFile):
    def __init__(self, cudaver: str):
        super().__init__(cudaver)

    def filename(self) -> str:
        return 'runtime-%s.dockerfile' % self.cudaVersion

    def tag(self) -> str:
        t = super().tag()
        return 'tinkertools/tinker9-runtime:%s' % t

    def content(self) -> str:
        develFile = DevelFile(self.cudaVersion)

        c = '''FROM %s AS tool_image
FROM nvidia/cuda:%s''' % (develFile.tag(), self.config[kRuntimeUbuntu])

        c += NewLine
        c += NewLine
        c += '''# git and cmake are no longer necessary
ARG DEBIAN_FRONTEND=noninteractive
RUN apt update -y && apt install -y ca-certificates libssl-dev gfortran'''

#         c += '''ARG LibPath=/opt/nvidia/hpc_sdk/Linux_x86_64/%s/compilers/lib
# COPY --from=tool_image "${LibPath}" "${LibPath}"
# ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${LibPath}"''' % self.nvhpc

        return c

class CompileFile(DockerFile):
    def __init__(self, cudaver: str):
        super().__init__(cudaver)

    def filename(self) -> str:
        return 'compile-%s.dockerfile' % self.cudaVersion

    def tag(self) -> str:
        return 'temp_build_tinker9-%s' % self.cudaVersion

    def cmakeArgComputeCapability(cls, version: str) -> str:
        if version == '10.1':
            c = '50,60,70,75'
        elif version == '11.2.2':
            c = '50,60,70,75,80'
        else:
            raise Exception('Unknown Nvhpc version %s' % version)
        return c

    def content(self) -> str:
        develFile = DevelFile(self.cudaVersion)

        c = 'FROM %s' % develFile.tag()
        c += NewLine
        c += '''ARG T9Dir=/home/tinker9

# clone tinker9
WORKDIR /home
RUN git clone https://github.com/tinkertools/tinker9

# configure tinker9
WORKDIR $T9Dir
RUN git submodule update --init
ENV CUDA_HOME=/usr/local/cuda
RUN cmake $T9Dir -B $T9Dir/build -DCOMPUTE_CAPABILITY=%s -DGPU_LANG=CUDA -DCMAKE_Fortran_COMPILER=gfortran -DCMAKE_INSTALL_PREFIX=$T9Dir/bin

# make tinker9
WORKDIR $T9Dir/build
RUN make -j%d
RUN make install''' % (self.cmakeArgComputeCapability(self.cudaVersion), DefaultNProc)

        return c

class InstallFile(DockerFile):
    def __init__(self, cudaver: str):
        super().__init__(cudaver)
        t = datetime.today().strftime('%Y%m%d')
        githash = subprocess.check_output(["git", "log", "-1", "--format=%h"])
        githash = githash.decode('utf-8').strip()
        self._tagInstallFile = 'tinkertools/tinker9:cuda%s-%s-%s' % (self.cudaVersion, t, githash)

    def filename(self) -> str:
        return 'install-%s.dockerfile' % self.cudaVersion

    def tag(self) -> str:
        return self._tagInstallFile

    def content(self) -> str:
        runtimeFile = RuntimeFile(self.cudaVersion)
        compileFile = CompileFile(self.cudaVersion)

        c = '''FROM %s AS build_image

FROM %s
COPY --from=build_image /home/tinker9/bin /home/tinker9/bin
ENV PATH="$PATH:/home/tinker9/bin/gpu-m"''' % (compileFile.tag(), runtimeFile.tag())

        return c

    def printCmd(self):
        super().printCmd()
        # delete the temporary image
        compileFile = CompileFile(self.cudaVersion)
        cmd = 'docker rmi %s' % compileFile.tag()
        print(cmd)
        cmd = 'docker tag %s tinkertools/tinker9:cuda%s-latest' % (self.tag(), self.cudaVersion)
        print(cmd)
        return self

def DockerFileFactory(cudaver: str, stage: str) -> DockerFile:
    d = DockerFile(cudaver)
    if stage == 'devel':
        d = DevelFile(cudaver)
    elif stage == 'runtime':
        d = RuntimeFile(cudaver)
    elif stage == 'compile':
        d = CompileFile(cudaver)
    elif stage == 'install':
        d = InstallFile(cudaver)
    else:
        raise Exception('Unknown build stage %s' % stage)
    return d

if __name__ == '__main__':
    if len(sys.argv) >= 3:
        try:
            cudaver, stage = sys.argv[1], sys.argv[2]
            d = DockerFileFactory(cudaver, stage)
            d.generateFile(printToScreen=False).printCmd()
        except Exception as err:
            Help.printMessage(err.args[0])
            exit(1)
    else:
        Help.printMessage('')

# deprecated

kNvhpc = 'nvhpc'

{
    # cuda   : nvhpc
    '10.1'   : '20.9',
    '11.2.2' : '22.3'
}

class Nvhpc:
    @classmethod
    def dockerRunInstallNvhpc(cls, version: str) -> str:
        c = '# install nvhpc'
        c += NewLine
        if version == '20.9':
            c += '''RUN wget https://developer.download.nvidia.com/hpc-sdk/20.9/nvhpc-20-9_20.9_amd64.deb https://developer.download.nvidia.com/hpc-sdk/20.9/nvhpc-2020_20.9_amd64.deb
RUN apt install -y ./nvhpc-20-9_20.9_amd64.deb ./nvhpc-2020_20.9_amd64.deb
RUN rm ./nvhpc-20-9_20.9_amd64.deb ./nvhpc-2020_20.9_amd64.deb'''
        elif version == '22.3':
            c += '''RUN echo 'deb [trusted=yes] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list
RUN apt update -y && apt install -y nvhpc-22-3-cuda-multi'''
        else:
            raise Exception('Unknown Nvhpc version %s' % version)
        return c
